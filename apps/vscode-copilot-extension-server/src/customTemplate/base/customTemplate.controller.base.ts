/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomTemplateService } from "../customTemplate.service";
import { CustomTemplateCreateInput } from "./CustomTemplateCreateInput";
import { CustomTemplate } from "./CustomTemplate";
import { CustomTemplateFindManyArgs } from "./CustomTemplateFindManyArgs";
import { CustomTemplateWhereUniqueInput } from "./CustomTemplateWhereUniqueInput";
import { CustomTemplateUpdateInput } from "./CustomTemplateUpdateInput";

export class CustomTemplateControllerBase {
  constructor(protected readonly service: CustomTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomTemplate })
  @swagger.ApiBody({
    type: CustomTemplateCreateInput,
  })
  async createCustomTemplate(
    @common.Body() data: CustomTemplateCreateInput
  ): Promise<CustomTemplate> {
    return await this.service.createCustomTemplate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomTemplate] })
  @ApiNestedQuery(CustomTemplateFindManyArgs)
  async customTemplates(
    @common.Req() request: Request
  ): Promise<CustomTemplate[]> {
    const args = plainToClass(CustomTemplateFindManyArgs, request.query);
    return this.service.customTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customTemplate(
    @common.Param() params: CustomTemplateWhereUniqueInput
  ): Promise<CustomTemplate | null> {
    const result = await this.service.customTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CustomTemplateUpdateInput,
  })
  async updateCustomTemplate(
    @common.Param() params: CustomTemplateWhereUniqueInput,
    @common.Body() data: CustomTemplateUpdateInput
  ): Promise<CustomTemplate | null> {
    try {
      return await this.service.updateCustomTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomTemplate(
    @common.Param() params: CustomTemplateWhereUniqueInput
  ): Promise<CustomTemplate | null> {
    try {
      return await this.service.deleteCustomTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
