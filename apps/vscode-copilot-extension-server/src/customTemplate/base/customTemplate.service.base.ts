/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CustomTemplate as PrismaCustomTemplate } from "@prisma/client";

export class CustomTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customTemplate.count(args);
  }

  async customTemplates(
    args: Prisma.CustomTemplateFindManyArgs
  ): Promise<PrismaCustomTemplate[]> {
    return this.prisma.customTemplate.findMany(args);
  }
  async customTemplate(
    args: Prisma.CustomTemplateFindUniqueArgs
  ): Promise<PrismaCustomTemplate | null> {
    return this.prisma.customTemplate.findUnique(args);
  }
  async createCustomTemplate(
    args: Prisma.CustomTemplateCreateArgs
  ): Promise<PrismaCustomTemplate> {
    return this.prisma.customTemplate.create(args);
  }
  async updateCustomTemplate(
    args: Prisma.CustomTemplateUpdateArgs
  ): Promise<PrismaCustomTemplate> {
    return this.prisma.customTemplate.update(args);
  }
  async deleteCustomTemplate(
    args: Prisma.CustomTemplateDeleteArgs
  ): Promise<PrismaCustomTemplate> {
    return this.prisma.customTemplate.delete(args);
  }
}
