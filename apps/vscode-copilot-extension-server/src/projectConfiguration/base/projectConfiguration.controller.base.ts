/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectConfigurationService } from "../projectConfiguration.service";
import { ProjectConfigurationCreateInput } from "./ProjectConfigurationCreateInput";
import { ProjectConfiguration } from "./ProjectConfiguration";
import { ProjectConfigurationFindManyArgs } from "./ProjectConfigurationFindManyArgs";
import { ProjectConfigurationWhereUniqueInput } from "./ProjectConfigurationWhereUniqueInput";
import { ProjectConfigurationUpdateInput } from "./ProjectConfigurationUpdateInput";

export class ProjectConfigurationControllerBase {
  constructor(protected readonly service: ProjectConfigurationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProjectConfiguration })
  async createProjectConfiguration(
    @common.Body() data: ProjectConfigurationCreateInput
  ): Promise<ProjectConfiguration> {
    return await this.service.createProjectConfiguration({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProjectConfiguration] })
  @ApiNestedQuery(ProjectConfigurationFindManyArgs)
  async projectConfigurations(
    @common.Req() request: Request
  ): Promise<ProjectConfiguration[]> {
    const args = plainToClass(ProjectConfigurationFindManyArgs, request.query);
    return this.service.projectConfigurations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProjectConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projectConfiguration(
    @common.Param() params: ProjectConfigurationWhereUniqueInput
  ): Promise<ProjectConfiguration | null> {
    const result = await this.service.projectConfiguration({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProjectConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjectConfiguration(
    @common.Param() params: ProjectConfigurationWhereUniqueInput,
    @common.Body() data: ProjectConfigurationUpdateInput
  ): Promise<ProjectConfiguration | null> {
    try {
      return await this.service.updateProjectConfiguration({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProjectConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjectConfiguration(
    @common.Param() params: ProjectConfigurationWhereUniqueInput
  ): Promise<ProjectConfiguration | null> {
    try {
      return await this.service.deleteProjectConfiguration({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
