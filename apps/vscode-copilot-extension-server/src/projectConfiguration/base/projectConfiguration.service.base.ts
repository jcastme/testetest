/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProjectConfiguration as PrismaProjectConfiguration,
} from "@prisma/client";

export class ProjectConfigurationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProjectConfigurationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.projectConfiguration.count(args);
  }

  async projectConfigurations(
    args: Prisma.ProjectConfigurationFindManyArgs
  ): Promise<PrismaProjectConfiguration[]> {
    return this.prisma.projectConfiguration.findMany(args);
  }
  async projectConfiguration(
    args: Prisma.ProjectConfigurationFindUniqueArgs
  ): Promise<PrismaProjectConfiguration | null> {
    return this.prisma.projectConfiguration.findUnique(args);
  }
  async createProjectConfiguration(
    args: Prisma.ProjectConfigurationCreateArgs
  ): Promise<PrismaProjectConfiguration> {
    return this.prisma.projectConfiguration.create(args);
  }
  async updateProjectConfiguration(
    args: Prisma.ProjectConfigurationUpdateArgs
  ): Promise<PrismaProjectConfiguration> {
    return this.prisma.projectConfiguration.update(args);
  }
  async deleteProjectConfiguration(
    args: Prisma.ProjectConfigurationDeleteArgs
  ): Promise<PrismaProjectConfiguration> {
    return this.prisma.projectConfiguration.delete(args);
  }
}
