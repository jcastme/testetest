/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UsageAnalyticsService } from "../usageAnalytics.service";
import { UsageAnalyticsCreateInput } from "./UsageAnalyticsCreateInput";
import { UsageAnalytics } from "./UsageAnalytics";
import { UsageAnalyticsFindManyArgs } from "./UsageAnalyticsFindManyArgs";
import { UsageAnalyticsWhereUniqueInput } from "./UsageAnalyticsWhereUniqueInput";
import { UsageAnalyticsUpdateInput } from "./UsageAnalyticsUpdateInput";

export class UsageAnalyticsControllerBase {
  constructor(protected readonly service: UsageAnalyticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UsageAnalytics })
  async createUsageAnalytics(
    @common.Body() data: UsageAnalyticsCreateInput
  ): Promise<UsageAnalytics> {
    return await this.service.createUsageAnalytics({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UsageAnalytics] })
  @ApiNestedQuery(UsageAnalyticsFindManyArgs)
  async usageAnalyticsItems(
    @common.Req() request: Request
  ): Promise<UsageAnalytics[]> {
    const args = plainToClass(UsageAnalyticsFindManyArgs, request.query);
    return this.service.usageAnalyticsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UsageAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async usageAnalytics(
    @common.Param() params: UsageAnalyticsWhereUniqueInput
  ): Promise<UsageAnalytics | null> {
    const result = await this.service.usageAnalytics({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UsageAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUsageAnalytics(
    @common.Param() params: UsageAnalyticsWhereUniqueInput,
    @common.Body() data: UsageAnalyticsUpdateInput
  ): Promise<UsageAnalytics | null> {
    try {
      return await this.service.updateUsageAnalytics({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UsageAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUsageAnalytics(
    @common.Param() params: UsageAnalyticsWhereUniqueInput
  ): Promise<UsageAnalytics | null> {
    try {
      return await this.service.deleteUsageAnalytics({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
